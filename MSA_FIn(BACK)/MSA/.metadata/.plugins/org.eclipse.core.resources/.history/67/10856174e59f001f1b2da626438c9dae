package com.bharath.msa.service;

import java.util.Date;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.bharath.msa.entity.VendorReceivedOrder;
import com.bharath.msa.repository.VendorReceivedOrderRepository;

@Service
public class VendorReceivedOrderServiceImpl {
	
	 @Autowired
	    private VendorReceivedOrderRepository vendorReceivedOrderRepository;

	    
	 public VendorReceivedOrder storeOrder(VendorReceivedOrder order) {
	        // Setting the date to the current date and status to "Pending" before saving
	        order.setOrderDate(new Date()); // Sets the current date
	        order.setStatus("Pending"); // Sets status to "Pending"
	        return vendorReceivedOrderRepository.save(order);
	    }

	    public List<VendorReceivedOrder> storeOrders(List<VendorReceivedOrder> orders) {
	        for (VendorReceivedOrder order : orders) {
	            order.setOrderDate(new Date()); // Sets the current date
	            order.setStatus("Pending"); // Sets status to "Pending"
	        }
	        return vendorReceivedOrderRepository.saveAll(orders);
	    }

	    public List<VendorReceivedOrder> getOrders() {
	        List<VendorReceivedOrder> orders = vendorReceivedOrderRepository.findAll();
	        // No need to modify date or status when retrieving orders
	        return orders;
	    }
	    
	    public List<VendorReceivedOrder> getPendingOrdersByVendor(Long vendorId) {
	        // Fetch pending orders for the specified vendor
	        return vendorReceivedOrderRepository.findByVendorIdAndStatus(vendorId, "Pending");
	    }
	    
	    public List<VendorReceivedOrder> updateExistingOrders(List<VendorReceivedOrder> orders) {
	        // Ensure all orders have a valid ID to be updated
	        for (VendorReceivedOrder order : orders) {
	            if (order.getId() == null || !vendorReceivedOrderRepository.existsById(order.getId())) {
	                throw new IllegalArgumentException("Order ID must be valid for updating existing entries.");
	            }
	        }

	        // Save all the orders; JPA will update the ones with existing IDs
	        return vendorReceivedOrderRepository.saveAll(orders);
	    }

}
